```{r}
#| label: common
#| include: false
# Description: Common settings
# Packages ---------------------------------------------------------------
pacman::p_load(
  ggplot2,
  scales,
  tibble,
  dplyr,
  tidyr,
  readr,
  stringr,
  reprex,
  fs,
  rstudioapi,
  here,
  rmarkdown,
  knitr,
  kableExtra,
  qtkit,
  tinytable
)

# Functions --------------------------------------------------------------

# Change column names to title case:
# - `whitelist` is a list of words that should be in uppercase
# - `blacklist` is a list of words that should be in lowercase
to_titlecase <- function(df, whitelist = c("iqr", "sd"), blacklist = c()) {
  df %>%
    rename_with(
      ~ case_when(
        tolower(.) %in% tolower(blacklist) ~ tolower(.),
        tolower(.) %in% tolower(whitelist) ~ toupper(str_replace_all(., "[_.]", " ")),
        TRUE ~ str_to_title(str_replace_all(., "[_.]", " "))
      ),
      everything()
    )
}

# Plots ------------------------------------------------------------------

# Plot theme
theme_qtalr <-
  function(font = "", font_size = 9) {
    ggplot2::theme_minimal() %+replace%

      ggplot2::theme(
        plot.title = ggplot2::element_text(
          family = font,
          size = font_size * 1.5
        ),
        plot.subtitle = ggplot2::element_text(
          family = font,
          size = font_size * 1.25
        ),
        plot.caption = ggplot2::element_text(
          family = font,
          size = font_size * 0.75
        ),
        axis.title = ggplot2::element_text(
          family = font,
          size = font_size
        ),
        axis.text = ggplot2::element_text(
          family = font,
          size = font_size * 0.75
        ),
        legend.title = ggplot2::element_text(
          family = font,
          size = font_size
        ),
        legend.text = ggplot2::element_text(
          family = font,
          size = font_size * 0.75
        )
      )
  }

# Set theme

ggplot2::theme_set(theme_qtalr(font_size = 12))

# Create color palettes

if (knitr::is_latex_output()) {
  # if output is latex, use greyscale palette
  custom_pal <- c("#000000", "#525252", "#717171", "#929292", "#BABABA", "#DADADA") # print palette
  custom_pal_continuous <- c("#000000", "#DADADA") # continuous grayscale palette
  # Geom defaults
  update_geom_defaults("smooth", list(colour = "#525252"))
  update_geom_defaults("point", list(colour = "#929292"))
} else {
  # if output is not latex, use colorblind palette
  custom_pal <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7") # colorblind palette
  custom_pal_continuous <- c("#999999", "#CC79A7") # continuous colorblind palette
  # Geom defaults
  update_geom_defaults("smooth", list(colour = "#0072B2"))
  update_geom_defaults("point", list(colour = "#525252"))
}

# Assign color palettes

# Set discrete palettes
# scale_y_discrete <- function(...) {
#   ggplot2::scale_y_discrete(..., values = custom_pal)
# }

# scale_x_discrete <- function(...) {
#   ggplot2::scale_x_discrete(..., values = custom_pal)
# }

scale_color_discrete <- function(...) {
  ggplot2::scale_color_manual(..., values = custom_pal)
}

# Set continuous palettes
scale_color_continuous <- function(...) {
  ggplot2::scale_color_gradientn(..., colors = custom_pal_continuous)
}

# Set fill palettes
scale_fill_discrete <- function(...) {
  ggplot2::scale_fill_manual(..., values = custom_pal)
}

# Set linetype values
scale_linetype_discrete <- function(...) {
  ggplot2::scale_linetype_manual(..., values = c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash"))
}

# Set shape values
scale_shape_discrete <- function(...) {
  ggplot2::scale_shape_manual(..., values = 1:10)
}

# Options ----------------------------------------------------------------

options(digits = 3) # number of digits to print

# Misc -------------------------------------------------------------------

# Avoid conflict with stats::filter
filter <- dplyr::filter

# Avoid kableextra from outputting HTML on kable tables
options(kableExtra.auto_format = FALSE)

# Avoid tinytable from outputting HTML on tinytable tables
options(tinytable_print_output = "markdown") # for markdown
```
